name: Modular Download and Upload to Telegram

on:
  workflow_dispatch:
    inputs:
      download_urls:
        description: 'Comma-separated list of download URLs'
        required: true
      is_video:
        description: 'Is this a video?'
        required: true
        type: boolean
        default: false

jobs:
  download:
    runs-on: ubuntu-latest
    outputs:
      downloaded_file: ${{ steps.download_step.outputs.downloaded_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl python3-pip ffmpeg megatools zip
          sudo pip install yt-dlp gdown
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
        
      - name: Download files
        id: download_step
        run: |
          set -x
          IFS=',' read -r -a URLS <<< "${{ github.event.inputs.download_urls }}"
          for URL in "${URLS[@]}"; do
            echo "Processing URL: $URL"
            if [[ "${{ github.event.inputs.is_video }}" == "true" ]]; then
              yt-dlp "$URL" || { echo "Failed to download video: $URL"; continue; }
            else
              if [[ "$URL" == *"drive.google.com"* ]]; then
                gdown "$URL" || { echo "Failed to download Google Drive file: $URL"; continue; }
              elif [[ "$URL" == *"mega.nz"* ]]; then
                megadl "$URL" --username="${{ secrets.MEGA_EMAIL }}" --password="${{ secrets.MEGA_PASSWORD }}" || { echo "Failed to download Mega file: $URL"; continue; }
              elif [[ "$URL" == *"dropbox.com"* ]]; then
                curl -O "$(echo "$URL" | sed 's/dl=0/dl=1/')" || { echo "Failed to download Dropbox file: $URL"; continue; }
              elif [[ "$URL" == *"onedrive.live.com"* || "$URL" == *"1drv.ms"* ]]; then
                rclone copyurl "$URL" ./ --config ~/.config/rclone/rclone.conf || { echo "Failed to download OneDrive file: $URL"; continue; }
              else
                curl -O "$URL" || { echo "Failed to download direct link: $URL"; continue; }
              fi
            fi
            FILE=$(ls -t | head -1)
            if [ -z "$FILE" ]; then
              echo "No file downloaded for URL: $URL"
              continue
            fi
            echo "::set-output name=downloaded_file::$FILE"
          done

  process:
    runs-on: ubuntu-latest
    needs: download
    outputs:
      processed_file: ${{ steps.process_step.outputs.processed_file }}
    steps:
      - name: Process file
        id: process_step
        run: |
          set -x
          FILE="${{ needs.download.outputs.downloaded_file }}"
          FILE_TYPE=$(file --mime-type -b "$FILE")
          echo "File type: $FILE_TYPE"
          if echo "$FILE_TYPE" | grep -q "video"; then
            if ! echo "$FILE_TYPE" | grep -q "mp4"; then
              ffmpeg -i "$FILE" -c:v libx264 -c:a aac "${FILE%.*}.mp4" || { echo "Failed to convert video: $FILE"; exit 1; }
              FILE="${FILE%.*}.mp4"
            fi
          fi
          echo "::set-output name=processed_file::$FILE"

  upload:
    runs-on: ubuntu-latest
    needs: process
    steps:
      - name: Install Python dependencies
        run: pip install requests requests-toolbelt
      - name: Upload to Telegram
        run: |
          set -x
          FILE="${{ needs.process.outputs.processed_file }}"
          FILE_SIZE=$(stat -c%s "$FILE")
          if [[ $FILE_SIZE -gt 2000 * 1024 * 1024 ]]; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" -d text="❌ File is too large (>2 GB)."
            exit 1
          fi
          python3 upload_to_telegram.py "$FILE" "${{ secrets.TELEGRAM_BOT_TOKEN }}" "${{ secrets.TELEGRAM_CHAT_ID }}"

  notify:
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Notify completion
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" -d text="✅ Workflow completed!"
