name: Enhanced Download and Upload to Telegram

on:
  workflow_dispatch:
    inputs:
      download_url:
        description: 'Download URL (YouTube, Google Drive, Mega, Dropbox, OneDrive, Direct Link, etc.)'
        required: true
      download_type:
        description: 'Type of download (video, cloud, direct)'
        required: true
        type: choice
        options:
          - video
          - cloud
          - direct

jobs:
  download-and-upload:
    runs-on: ubuntu-latest
    environment: Telegram  # Reference the Telegram environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl python3-pip ffmpeg megatools zip

      - name: Install Python dependencies
        run: |
          pip install requests requests-toolbelt

      - name: Install yt-dlp, gdown, and rclone
        run: |
          sudo pip install yt-dlp gdown
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone
        run: |
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf

      - name: Debug Telegram credentials
        run: |
          echo "TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}"
          echo "TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}"

      - name: Test Telegram API
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="Test message from GitHub Actions"

      - name: Download file
        run: |
          echo "Downloading: ${{ github.event.inputs.download_url }}"

          if [[ "${{ github.event.inputs.download_type }}" == "video" ]]; then
            # Use yt-dlp for videos
            yt-dlp -o "downloaded_file" "${{ github.event.inputs.download_url }}"
          elif [[ "${{ github.event.inputs.download_type }}" == "cloud" ]]; then
            # Handle cloud links
            if [[ "${{ github.event.inputs.download_url }}" == *"drive.google.com"* ]]; then
              gdown -O downloaded_file "${{ github.event.inputs.download_url }}"
            elif [[ "${{ github.event.inputs.download_url }}" == *"mega.nz"* ]]; then
              megadl "${{ github.event.inputs.download_url }}" --username="${{ secrets.MEGA_EMAIL }}" --password="${{ secrets.MEGA_PASSWORD }}" --path=downloaded_file
            elif [[ "${{ github.event.inputs.download_url }}" == *"dropbox.com"* ]]; then
              curl -o downloaded_file "$(echo "${{ github.event.inputs.download_url }}" | sed 's/dl=0/dl=1/')"
            elif [[ "${{ github.event.inputs.download_url }}" == *"onedrive.live.com"* || "${{ github.event.inputs.download_url }}" == *"1drv.ms"* ]]; then
              rclone copyurl "${{ github.event.inputs.download_url }}" ./ --config ~/.config/rclone/rclone.conf
              mv "$(ls -t | head -1)" downloaded_file
            else
              echo "Unsupported cloud link."
              exit 1
            fi
          else
            # Handle direct links
            curl -o downloaded_file "${{ github.event.inputs.download_url }}"
          fi

          # Detect file type
          FILE="downloaded_file"
          FILE_TYPE=$(file --mime-type -b "$FILE")
          echo "File type: $FILE_TYPE"

          # Convert video if needed
          if echo "$FILE_TYPE" | grep -q "video"; then
            if ! echo "$FILE_TYPE" | grep -q "mp4"; then
              ffmpeg -i "$FILE" -c:v libx264 -c:a aac "${FILE%.*}.mp4"
              FILE="${FILE%.*}.mp4"  # Update FILE variable to point to the converted file
            fi
          fi

          # Upload file to Telegram using the Python script
          python3 upload_to_telegram.py "$FILE" "${{ secrets.TELEGRAM_BOT_TOKEN }}" "${{ secrets.TELEGRAM_CHAT_ID }}"

          # Clean up
          rm -rf "$FILE"

      - name: Notify completion
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="âœ… Workflow completed! File processed."
